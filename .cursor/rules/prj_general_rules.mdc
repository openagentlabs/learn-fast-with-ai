---
alwaysApply: true
---

# Learn Fast with AI - AI Agent Coding Rules

## Table of Contents

### üìã Core Rules (MUST READ FIRST)
1. General Information  
2. Documentation Discovery  
3. Recent Development History  
4. Code Quality Rules  
5. Temporary Scripts and Debugging Files  

### üèóÔ∏è Architecture & Patterns
6. Dependency Injection & Services  
7. TypeScript Import Conventions  
8. Application Lifecycle Hooks  

### ‚úçÔ∏è Code Generation Standards
9. Development History Logging  
10. Code Simplicity & Readability  
11. Function Decomposition  
12. Single Responsibility Principle  

### üé® Web Application Design
13. Web Application Design  
14. Pages Structure Pattern  

### üõ†Ô∏è Available Tools
15. Available Tools  

---

## Available Tools

### Cloud & Infrastructure
- **GCP gcloud CLI**: Installed and available for GCP operations, Cloud Run deployments, and project management
- **Terraform**: Installed and ready to use for infrastructure provisioning, configuration management, and infrastructure as code
- **Docker CLI**: Installed and ready to use for containerization, image building, container management, and local development environments

### Version Control
- **GitHub CLI (gh)**: Installed and ready to use for GitHub operations, PR management, and repository interactions

---

## Core Rules Summary

### General Information
All code must be part of a clearly documented, self-contained module.  
Each folder requires a `README.md` describing its purpose, functionality, and integration points.

### Documentation Discovery
- Every folder must contain a `README.md` explaining what is inside.  
- The `README.md` serves as the **first point of reference** for understanding the module.

### Development History
- Every code change must be logged in `debuging/code_development_history.md`.  
- Include a **UUID**, **DateTime**, **User Request**, **Actions Completed**, and **Code Blocks Modified**.  
- This is always the **final step** after completing a task.

### Dependency Injection & Services
- All services use dependency injection with TSyringe.  
- Services must extend a shared base class and use singleton patterns.  
- Each service resides in its own folder with a `README.md`, `index.ts`, and tests.

### TypeScript Import Conventions
- **Never include `.js` extensions** in TypeScript imports.  
- Maintain consistent alias imports (e.g., `@/lib/...`).  
- Follow ESLint and TypeScript rules for consistency and build compatibility.

### Code Quality & Linting
- Run linting checks after every change.  
- Fix all warnings and errors before completion.  
- Code with linter issues is **not considered complete**.

### Temporary Scripts
- Temporary or debugging scripts must be stored in `/debuging/scripts/`.  
- Scripts must include headers describing purpose, creation date, and usage.  
- Delete scripts after use and record them in development history.

### Code Simplicity & Readability
- Prioritize **clarity and maintainability** over optimization.  
- Use descriptive naming, minimal nesting, and clear constants.  
- Avoid hidden values (magic numbers) and over-engineering.

### Function Decomposition
- Keep functions **short, focused, and readable**.  
- Limit to 50 lines, 3 nesting levels, and one responsibility.  
- Break complex logic into smaller, named helper functions.

### Single Responsibility Principle
- Each function should perform **exactly one task**.  
- If the description includes ‚Äúand/or,‚Äù split it into multiple functions.  
- Avoid side effects and hidden dependencies.

### Web Application Design
- Each page has its own subfolder under `src/app/pages/[pagename]/`.  
- Must include:
  - `[PageName]Page.tsx`
  - `README.md`
  - Tests and utility files as needed  
- The `README.md` should describe the page purpose, features, data, and state management.

### Application Lifecycle Hooks
- Use hooks to manage startup and shutdown logic.  
- `appStartHook` initializes services and validates configuration.  
- `appEndHook` performs graceful shutdown and cleanup.  
- Always log key lifecycle events and handle errors gracefully.

---

## Key AI Agent Rules

- **Always document before coding.**  
- **Always read `README.md` before editing code.**  
- **Always run and fix linter errors.**  
- **Always log completed work in development history.**  
- **Always follow service, hook, and page structure conventions.**  
- **Never skip testing or documentation.**

---

## Golden Rules Summary

1. **Document Everything** ‚Äì Each module must explain itself.  
2. **Keep Code Simple** ‚Äì Readable and maintainable over clever.  
3. **Follow SRP** ‚Äì One function, one responsibility.  
4. **Track All Changes** ‚Äì Use UUID-based development history logging.  
5. **Validate Quality** ‚Äì Linter and test checks required before completion.  
6. **Use Correct Structure** ‚Äì Organized by services, pages, hooks, and workflows.  
7. **End Every Task with Documentation and Logging** ‚Äì This is mandatory.
