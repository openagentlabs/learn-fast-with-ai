name: Deploy Next.js Container to Cloud Run

on:
  push:
    branches:
      - main

# Define environment variables used throughout the workflow
env:
  PROJECT_ID: 'keithtest001'      # <- REPLACE ME
  SERVICE_NAME: 'learn-fast-with-ai'        # <- REPLACE ME
  REGION: 'europe-west2'                 # <- REPLACE ME (e.g., us-west1, europe-west1)
  ARTIFACT_REPO: 'nextjs-containers'    # Name of your Artifact Registry repo

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Permissions required to fetch the OIDC token if using Workload Identity Federation
    # If using Service Account Key, this is less critical but good practice.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- 1. Authenticate to Google Cloud ---
      - name: Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          # Uses the secret containing the full JSON key of the Service Account
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # --- 2. Configure Docker for Artifact Registry ---
      - name: Set up Cloud SDK and Configure Docker
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'
          # Automatically configures Docker to authenticate to Artifact Registry
          # The region-docker.pkg.dev format is standard for Artifact Registry
          install_components: 'gke-gcloud-auth-plugin'

      # --- 2.5. Register Cloud Deploy Pipeline and Target (One-time setup) ---
      - name: Register Cloud Deploy Pipeline and Target
        run: |
          # Enable Cloud Deploy API (idempotent - won't error if already enabled)
          gcloud services enable clouddeploy.googleapis.com \
            --project=${{ env.PROJECT_ID }} || true
          
          # Apply Cloud Deploy pipeline configuration (idempotent)
          # If pipeline already exists, this will update it; if not, it will create it
          gcloud deploy apply --file=deploy/clouddeploy.yaml \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }} || true
          
          # Apply Cloud Run target configuration (idempotent)
          # If target already exists, this will update it; if not, it will create it
          gcloud deploy apply --file=deploy/target-dev.yaml \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }} || true
          
          echo "Cloud Deploy pipeline and target registered/updated successfully"

      # --- 3. Build and Push Container Image ---
      - name: Build and Push Image to Artifact Registry
        run: |
          # 1. Define the full image path using the short SHA for unique tagging
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          
          # 2. Submit the build using cloudbuild.yaml which defines:
          # - Build step using docker/Dockerfile (multi-stage build)
          # - Push step to Artifact Registry
          # The Dockerfile uses multi-stage builds to:
          # - Install all dependencies (including dev deps for building)
          # - Build the Next.js application (creates .next directory)
          # - Create a minimal production image with just the built output
          gcloud builds submit \
            --config=cloudbuild.yaml \
            --substitutions=SHORT_SHA=${{ github.sha }} \
            --project ${{ env.PROJECT_ID }}
            
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV # Export tag for deployment step

      # --- 4. Deploy to Cloud Run using Cloud Deploy ---
      # This step creates a Cloud Deploy release which automatically deploys to the dev target
      - name: Create and Deploy Release via Cloud Deploy
        run: |
          # Define the release name using short SHA for uniqueness
          RELEASE_NAME="release-${{ github.sha }}"
          
          # Create Cloud Deploy release and trigger deployment
          # This will automatically deploy to the dev target defined in deploy/target-dev.yaml
          # --deploy-config is used to specify the target configuration for rendering
          gcloud deploy releases create "$RELEASE_NAME" \
            --delivery-pipeline=learn-fast-with-ai-pipeline \
            --region=${{ env.REGION }} \
            --deploy-config=deploy/target-dev.yaml \
            --images=app=${{ env.IMAGE_TAG }} \
            --project=${{ env.PROJECT_ID }}
          
          echo "Release created: $RELEASE_NAME"
          echo "Deployment to Cloud Run initiated automatically"
